name: 'Terraform - Sandbox'

on:
  push:
    branches: [ "sandbox" ]
  pull_request:
    branches: [ "sandbox" ]

permissions:
  contents: read

jobs:
  # Scan repository for secrets using Gitleaks
  secrets-scan:
    name: 'Secrets Scan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Gitleaks # Detect hardcoded secrets in all files, including Terraform
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--source=. --verbose"

  # Run Checkov for static code analysis of Terraform files
  checkov:
    name: 'Checkov Scan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov # Static analysis for Terraform security and compliance
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./tf/environments/sandbox

  # Run TFSec for static analysis of Terraform files
  tfsec:
    name: 'TFSec Scan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run TFSec # Security scanner for Terraform code
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ./tf/environments/sandbox

  # Run Terraform commands: init, fmt, validate, plan, apply
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: [checkov, tfsec]
    environment: 
      name: sandbox
      # Requires environment protection rules (required reviewers) in GitHub repo settings

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Set up the Azure credentials for authentication
    - name: Login to Azure # Authenticate to Azure for Terraform
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'

    # Install the latest version of Terraform CLI
    - name: Setup Terraform # Install Terraform CLI
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init # Initialize Terraform working directory
      id: init
      run: terraform init
      working-directory: ./tf/environments/sandbox

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format # Check Terraform file formatting
      run: terraform fmt -check
      working-directory: ./tf/environments/sandbox

    # Validates the Terraform configuration files in the working directory
    - name: Terraform Validate # Validate Terraform configuration
      id: validate
      working-directory: ./tf/environments/sandbox
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan # Generate Terraform execution plan
      run: terraform plan -input=false
      working-directory: ./tf/environments/sandbox

    # Applies the changes required to reach the desired state of the configuration
    - name: Terraform Apply # Apply Terraform changes
      run: terraform apply -auto-approve -input=false
      working-directory: ./tf/environments/sandbox

  # Automate PR review and approval (for demonstration, auto-approve and comment)
  pr-review:
    name: 'Automate PR Review'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Approve Pull Request
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Add PR Review Comment
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: "Automated review: All checks have passed and this PR is ready for further review or merge."

  # Run Terratest for integration tests
  terratest:
    name: 'Terratest'
    runs-on: ubuntu-latest
    needs: terraform
    environment: sandbox

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go # Install Go for running Terratest
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Install dependencies # Install Go dependencies for tests
        run: go mod tidy
        working-directory: ./test
      - name: Run Terratest # Run Terratest integration tests
        run: go test -v ./...
        working-directory: ./test
