name: 'Terraform - QA'

on:
  pull_request:
    branches: [ "qa" ]

permissions:
  contents: write
  pull-requests: write

jobs:
  # Scan repository for secrets using Gitleaks
  secrets-scan:
    name: 'Secrets Scan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Gitleaks # Detect hardcoded secrets in all files, including Terraform
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--source=. --verbose"

  # Run Checkov for static code analysis of Terraform files
  checkov:
    name: 'Checkov Scan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov # Static analysis for Terraform security and compliance
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./tf/environments/qa

  # Run TFSec for static analysis of Terraform files
  tfsec:
    name: 'TFSec Scan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run TFSec # Security scanner for Terraform code
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ./tf/environments/qa

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: [checkov, tfsec]
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      # Set up the Azure credentials for authentication
      - name: Login to Azure # Authenticate to Azure for Terraform
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Setup Terraform # Install Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2
      - name: Terraform Init # Initialize Terraform working directory
        run: terraform init
        working-directory: ./tf/environments/qa
      - name: Terraform Validate # Validate Terraform configuration
        run: terraform validate -no-color
        working-directory: ./tf/environments/qa
      - name: Terraform Plan # Generate and show an execution plan
        run: terraform plan -input=false
        working-directory: ./tf/environments/qa

  terratest:
    name: 'Terratest'
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go # Install Go for running Terratest
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Install dependencies # Install Go dependencies for tests
        run: go mod tidy
        working-directory: ./test
      - name: Run Terratest # Run Terratest integration tests
        run: go test -v ./...
        working-directory: ./test

  autoapprove:
    name: 'Auto-Approve QA PR'
    runs-on: ubuntu-latest
    needs: terratest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Approve Pull Request
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

  merge-qa:
    name: 'Merge QA PR'
    runs-on: ubuntu-latest
    needs: autoapprove
    if: github.event.pull_request.merged == false && github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Merge PR to QA
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            await github.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: "merge"
            });

  promote-to-dev:
    name: 'Promote to Dev'
    runs-on: ubuntu-latest
    needs: merge-qa
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create PR to Dev # Create a pull request to promote changes to dev
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: dev
          branch: ${{ github.head_ref }}
          title: "Promote ${{ github.head_ref }} to dev"
          body: "Automated PR from QA to Dev after successful QA checks and merge."
          draft: false
      - name: Request Reviewers # Request reviewers for the PR
        uses: necojackarc/auto-request-review-action@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          reviewers: user1,user2 # Replace with actual GitHub usernames or teams
